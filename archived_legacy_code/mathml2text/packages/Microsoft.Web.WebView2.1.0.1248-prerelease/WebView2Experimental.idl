// Copyright (C) Microsoft Corporation. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// These are the WebView2 experimental APIs published publicly as a part of the
// WebView2 prerelease package. Modifications to any published interface require
// a breaking change for the experimental APIs. Otherwise, do not modify
// published interfaces.

// midl is run from a tools directory with no special include paths setup.
// To import an IDL from the build you must get out of the tools path
// first.
// We include the shipping webview2.idl so that our preview APIs may
// interact with our public APIs.
import "../../edge_embedded_browser/client/win/current/webview2.idl";

[uuid(07abc5eb-fae4-4485-bf29-083ac335408b), version(1.0)]
library WebView2Experimental {

// Forward declarations

interface ICoreWebView2Experimental5;
interface ICoreWebView2ExperimentalCompositionController3;
interface ICoreWebView2ExperimentalCompositionController4;
interface ICoreWebView2ExperimentalController2;
interface ICoreWebView2ExperimentalEnvironment3;

interface ICoreWebView2ExperimentalFaviconChangedEventHandler;
interface ICoreWebView2ExperimentalGetFaviconCompletedHandler;
interface ICoreWebView2ExperimentalUpdateRuntimeCompletedHandler;
interface ICoreWebView2ExperimentalUpdateRuntimeResult;

// Enums and structs

/// Matrix that represents a 3D transform. This transform is used to
/// calculate correct coordinates when calling
/// CreateCoreWebView2PointerInfoFromPointerId. This is equivalent to a
/// D2D1_MATRIX_4X4_F
typedef struct COREWEBVIEW2_MATRIX_4X4 {
  /// The value in the first row and first column of the matrix.
  FLOAT _11;
  /// The value in the first row and second column of the matrix.
  FLOAT _12;
  /// The value in the first row and third column of the matrix.
  FLOAT _13;
  /// The value in the first row and fourth column of the matrix.
  FLOAT _14;
  /// The value in the second row and first column of the matrix.
  FLOAT _21;
  /// The value in the second row and second column of the matrix.
  FLOAT _22;
  /// The value in the second row and third column of the matrix.
  FLOAT _23;
  /// The value in the second row and fourth column of the matrix.
  FLOAT _24;
  /// The value in the third row and first column of the matrix.
  FLOAT _31;
  /// The value in the third row and second column of the matrix.
  FLOAT _32;
  /// The value in the third row and third column of the matrix.
  FLOAT _33;
  /// The value in the third row and fourth column of the matrix.
  FLOAT _34;
  /// The value in the fourth row and first column of the matrix.
  FLOAT _41;
  /// The value in the fourth row and second column of the matrix.
  FLOAT _42;
  /// The value in the fourth row and third column of the matrix.
  FLOAT _43;
  /// The value in the fourth row and fourth column of the matrix.
  FLOAT _44;
} COREWEBVIEW2_MATRIX_4X4;

/// Status of UpdateRuntime operation result.
[v1_enum]
typedef enum COREWEBVIEW2_UPDATE_RUNTIME_STATUS {
  /// Latest version of Edge WebView2 Runtime is installed.
  /// No update for Edge WebView2 Runtime is available, or Edge WebView2
  /// Runtime is updated successfully and latest version is now installed.
  COREWEBVIEW2_UPDATE_RUNTIME_STATUS_LATEST_VERSION_INSTALLED,

  /// Edge WebView2 Runtime update is already running, which could be
  /// triggered by auto update or by other UpdateRuntime request from some app.
  COREWEBVIEW2_UPDATE_RUNTIME_STATUS_UPDATE_ALREADY_RUNNING,

  /// Edge WebView2 Runtime update is blocked by group policy.
  COREWEBVIEW2_UPDATE_RUNTIME_STATUS_BLOCKED_BY_POLICY,

  /// Edge WebView2 Runtime update failed.
  /// See `ExtendedError` property of UpdateRuntimeResult for more
  /// information about the failure.
  COREWEBVIEW2_UPDATE_RUNTIME_STATUS_FAILED,
} COREWEBVIEW2_UPDATE_RUNTIME_STATUS;

/// Specifies memory usage target level of WebView.
[v1_enum]
typedef enum COREWEBVIEW2_MEMORY_USAGE_TARGET_LEVEL {
  /// Specifies normal memory usage target level.
  COREWEBVIEW2_MEMORY_USAGE_TARGET_LEVEL_NORMAL,

  /// Specifies low memory usage target level.
  /// Used for inactivate WebView for reduced memory consumption.
  COREWEBVIEW2_MEMORY_USAGE_TARGET_LEVEL_LOW,

} COREWEBVIEW2_MEMORY_USAGE_TARGET_LEVEL;

/// Specifies the image format to use for favicon.
[v1_enum]
typedef enum COREWEBVIEW2_FAVICON_IMAGE_FORMAT {
    /// Indicates that the PNG image format is used.
    COREWEBVIEW2_FAVICON_IMAGE_FORMAT_PNG,

    /// Indicates the JPEG image format is used.
    COREWEBVIEW2_FAVICON_IMAGE_FORMAT_JPEG,
} COREWEBVIEW2_FAVICON_IMAGE_FORMAT;

// End of enums and structs
/// This interface is an extension of `ICoreWebView2` that manages memory usage
/// target level.
[uuid(E05E04CA-7924-4C04-A84C-A90572DBA22A), object, pointer_default(unique)]
interface ICoreWebView2Experimental5 : IUnknown {

  /// `MemoryUsageTargetLevel` indicates desired memory consumption level of
  /// WebView.
  [propget] HRESULT MemoryUsageTargetLevel(
      [out, retval] COREWEBVIEW2_MEMORY_USAGE_TARGET_LEVEL* level);

  /// An app may set `MemoryUsageTargetLevel` to indicate desired memory
  /// consumption level of WebView. Scripts will not be impacted and continue
  /// to run. This is useful for inactive apps that still want to run scripts
  /// and/or keep network connections alive and therefore could not call
  /// `TrySuspend` and `Resume` to reduce memory consumption. These apps can
  /// set memory usage target level to `COREWEBVIEW2_MEMORY_USAGE_TARGET_LEVEL_LOW`
  /// when the app becomes inactive, and set back to
  /// `COREWEBVIEW2_MEMORY_USAGE_TARGET_LEVEL_NORMAL` when the app becomes
  /// active. It is not necessary to set CoreWebView2Controller's IsVisible
  /// property to false when setting the property.
  /// It is a best effort operation to change memory usage level, and the
  /// API will return before the operation completes.
  /// Setting the level to `COREWEBVIEW2_MEMORY_USAGE_TARGET_LEVEL_LOW`
  /// could potentially cause memory for some WebView browser processes to be
  /// swapped out to disk in some circumstances.
  /// It is a best effort to reduce memory usage as much as possible. If a script
  /// runs after its related memory has been swapped out, the memory will be swapped
  /// back in to ensure the script can still run, but performance might be impacted.
  /// Therefore, the app should set the level back to
  /// `COREWEBVIEW2_MEMORY_USAGE_TARGET_LEVEL_NORMAL` when the app becomes
  /// active again. Setting memory usage target level back to normal will not happen
  /// automatically.
  /// An app should choose to use either the combination of `TrySuspend` and `Resume`
  /// or the combination of setting MemoryUsageTargetLevel to low and normal. It is
  /// not advisable to mix them.
  /// Trying to set `MemoryUsageTargetLevel` while suspended will be ignored.
  /// The `TrySuspend` and `Resume` methods will change the `MemoryUsageTargetLevel`.
  /// `TrySuspend` will automatically set `MemoryUsageTargetLevel` to low while
  /// `Resume` on suspended WebView will automatically set `MemoryUsageTargetLevel`
  /// to normal. Calling `Resume` when the WebView is not suspended would not change
  /// `MemoryUsageTargetLevel`.
  ///
  /// \snippet ViewComponent.cpp MemoryUsageTargetLevel
  [propput] HRESULT MemoryUsageTargetLevel(
      [in] COREWEBVIEW2_MEMORY_USAGE_TARGET_LEVEL level);

}

/// The UpdateRuntime operation result.
[uuid(DD503E49-AB19-47C0-B2AD-6DDD09CC3E3A), object, pointer_default(unique)]
interface ICoreWebView2ExperimentalUpdateRuntimeResult : IUnknown {

  /// The status for the UpdateRuntime operation.
  [propget] HRESULT Status(
      [out, retval] COREWEBVIEW2_UPDATE_RUNTIME_STATUS* status);

  /// The update error that occurred while trying to update Edge WebView2 Runtime.
  /// ExtendedError will be S_OK if Status is not `COREWEBVIEW2_UPDATE_RUNTIME_STATUS_FAILED`
  /// or `COREWEBVIEW2_UPDATE_RUNTIME_STATUS_BLOCKED_BY_POLICY`.
  [propget] HRESULT ExtendedError([out, retval] HRESULT* error);
}

/// The caller implements this interface to receive the UpdateRuntime result.
[uuid(F1D2D722-3721-499C-87F5-4C405260697A), object, pointer_default(unique)]
interface ICoreWebView2ExperimentalUpdateRuntimeCompletedHandler : IUnknown {

  /// Provides the result for the UpdateRuntime operation.
  /// `errorCode` will be S_OK if the update operation can be performed
  /// normally, regardless of whether we could update the Edge WebView2
  /// Runtime. If an unexpected error interrupts the update operation, error
  /// code of that unexpected error would be set as `errorCode`.
  /// When update operation can be performed normally, but update resulted in
  /// failure, like download failed, the error code would be presented as
  /// `ExtendedError` property of ICoreWebView2ExperimentalUpdateRuntimeResult.
  HRESULT Invoke([in] HRESULT errorCode,
                 [in] ICoreWebView2ExperimentalUpdateRuntimeResult* result);
}

/// This interface is an extension of the ICoreWebView2Environment that manages
/// updating Edge WebView2 Runtime. An object implementing the
/// ICoreWebView2ExperimentalEnvironment3 interface will also implement
/// ICoreWebView2Environment.
[uuid(9A2BE885-7F0B-4B26-B6DD-C969BAA00BF1), object, pointer_default(unique)]
interface ICoreWebView2ExperimentalEnvironment3 : IUnknown {
  /// Try to update the installed Microsoft Edge WebView2 Runtime.
  /// This will potentially result in a new version of the Edge WebView2
  /// Runtime being installed and `NewBrowserVersionAvailable` event being raised.
  /// There is no guarantee on the order of that event being raised and
  /// UpdateRuntime's completed handler being invoked. Besides the
  /// `NewBrowserVersionAvailable` event, there will be no impact to any
  /// currently running WebView2s when the update is installed.
  /// Even though the Edge WebView2 Runtime update is installed for the machine
  /// and available to all users, the update will happen silently and not show
  /// elevation prompt.
  /// This will not impact Edge browser installations.
  /// The latest version can always be queried using the
  /// `GetAvailableCoreWebView2BrowserVersionString` API.
  /// The UpdateRuntime method is only supported for an installed Edge WebView2
  /// Runtime. When running a fixed version Edge WebView2 Runtime or non stable
  /// channel Edge browser, this API will return `HRESULT_FROM_WIN32(ERROR_NOT_SUPPORTED)`.
  /// There could only be one active UpdateRuntime operation in an app process,
  /// and calling this API before the completed handler for a previous call is invoked
  /// will fail with `HRESULT_FROM_WIN32(ERROR_BUSY)`.
  /// Calling this API repeatedly in a short period of time, will also fail with
  /// `HRESULT_FROM_WIN32(ERROR_BUSY)`. To protect accidental abuse of the update
  /// service, the implementation throttles the calls of this API to 3 times within
  /// 5 minutes in a process. The exact throttling limit can change in the future.
  /// Edge update service can only support one update request at a time globally.
  /// If there is already an update operation running in the Edge update service,
  /// UpdateRuntime request will result in the completed handler being invoked with a
  /// result that has `Status` of `COREWEBVIEW2_UPDATE_RUNTIME_STATUS_UPDATE_ALREADY_RUNNING`.
  /// As the running update could succeed or fail, the app should retry later if
  /// `NewBrowserVersionAvailable` event has not been raised.
  /// The UpdateRuntime operation is associated with the CoreWebView2Environment
  /// object and any ongoing UpdateRuntime operation will be aborted when the
  /// associated CoreWebView2Environment along with the CoreWebView2 objects that
  /// are created by the CoreWebView2Environment object are all released. In this
  /// case, the completed handler will be invoked with `S_OK` as `errorCode` and a
  /// result object with `Status` of COREWEBVIEW2_UPDATE_RUNTIME_STATUS_FAILED and
  /// `ExtendedError` as `E_ABORT`.
  ///
  /// \snippet AppWindow.cpp UpdateRuntime
  HRESULT UpdateRuntime(
      [in] ICoreWebView2ExperimentalUpdateRuntimeCompletedHandler* handler);
}

/// This interface is an extension of the ICoreWebView2CompositionController.
/// An object implementing ICoreWebView2ExperimentalCompositionController4
/// interface will also implement ICoreWebView2CompositionController.
[uuid(e6041d7f-18ac-4654-a04e-8b3f81251c33), object, pointer_default(unique)]
interface ICoreWebView2ExperimentalCompositionController4 : IUnknown {
  /// Returns the UI Automation Provider for the WebView.
  [propget] HRESULT AutomationProvider([out, retval] IUnknown** provider);

  /// A helper function to convert a pointerId received from the system into
  /// an ICoreWebView2ExperimentalPointerInfo.
  /// parentWindow is the HWND that contains the WebView. This can be any HWND
  /// in the hwnd tree that contains the WebView.
  /// The COREWEBVIEW2_MATRIX_4X4 is the transform from that HWND to the WebView.
  /// The returned ICoreWebView2ExperimentalPointerInfo is used in SendPointerInfo.
  /// The pointer type must be either pen or touch or the function will fail.
  HRESULT CreateCoreWebView2PointerInfoFromPointerId(
      [in] UINT pointerId,
      [in] HWND parentWindow,
      [in] struct COREWEBVIEW2_MATRIX_4X4 transform,
      [out, retval] ICoreWebView2PointerInfo** pointerInfo);
}

/// This interface is continuation of the
/// ICoreWebView2CompositionController interface to manage drag and
/// drop.
[uuid(b134916b-a104-4d2a-9567-c2fd53714350), object, pointer_default(unique)]
interface ICoreWebView2ExperimentalCompositionController3 : IUnknown {
  /// This function corresponds to \[IDropTarget::DragEnter\]\[WindowsWin32ApiOleidlNfOleidlIdroptargetDragenter\].
  ///
  /// This function has a dependency on AllowExternalDrop property of
  /// CoreWebView2Controller and return E_FAIL to callers to indicate this
  /// operation is not allowed if AllowExternalDrop property is set to false.
  ///
  /// The hosting application must register as an IDropTarget and implement
  /// and forward DragEnter calls to this function.
  ///
  /// In addition, the hosting application needs to create an IDropTargetHelper
  /// and call the corresponding \[IDropTargetHelper::DragEnter\]\[WindowsWin32ApiShobjidlCoreNfShobjidlCoreIdroptargethelperDragenter\] function on that
  /// object before forwarding the call to WebView.
  ///
  /// point parameter must be modified to include the WebView's offset and be in
  /// the WebView's client coordinates (Similar to how SendMouseInput works).
  ///
  /// \[WindowsWin32ApiOleidlNfOleidlIdroptargetDragenter\]: /windows/win32/api/oleidl/nf-oleidl-idroptarget-dragenter "IDropTarget::DragEnter (oleidl.h) - Win32 apps | Microsoft Docs"
  ///
  /// \[WindowsWin32ApiShobjidlCoreNfShobjidlCoreIdroptargethelperDragenter\]: /windows/win32/api/shobjidl_core/nf-shobjidl_core-idroptargethelper-dragenter "IDropTargetHelper::DragEnter (shobjidl_core.h) - Win32 apps | Microsoft Docs"
  ///
  /// \snippet DropTarget.cpp DragEnter
  HRESULT DragEnter(
      [in] IDataObject* dataObject,
      [in] DWORD keyState,
      [in] POINT point,
      [out, retval] DWORD* effect);

  /// This function corresponds to \[IDropTarget::DragLeave\]\[WindowsWin32ApiOleidlNfOleidlIdroptargetDragleave\].
  ///
  /// This function has a dependency on AllowExternalDrop property of
  /// CoreWebView2Controller and return E_FAIL to callers to indicate this
  /// operation is not allowed if AllowExternalDrop property is set to false.
  ///
  /// The hosting application must register as an IDropTarget and implement
  /// and forward DragLeave calls to this function.
  ///
  /// In addition, the hosting application needs to create an IDropTargetHelper
  /// and call the corresponding \[IDropTargetHelper::DragLeave\]\[WindowsWin32ApiShobjidlCoreNfShobjidlCoreIdroptargethelperDragleave\] function on that
  /// object before forwarding the call to WebView.
  ///
  /// \[WindowsWin32ApiOleidlNfOleidlIdroptargetDragleave\]: /windows/win32/api/oleidl/nf-oleidl-idroptarget-dragleave "IDropTarget::DragLeave (oleidl.h) - Win32 apps | Microsoft Docs"
  ///
  /// \[WindowsWin32ApiShobjidlCoreNfShobjidlCoreIdroptargethelperDragleave\]: /windows/win32/api/shobjidl_core/nf-shobjidl_core-idroptargethelper-dragleave "IDropTargetHelper::DragLeave (shobjidl_core.h) - Win32 apps | Microsoft Docs"
  ///
  /// \snippet DropTarget.cpp DragLeave
  HRESULT DragLeave();

  /// This function corresponds to \[IDropTarget::DragOver\]\[WindowsWin32ApiOleidlNfOleidlIdroptargetDragover\].
  ///
  /// This function has a dependency on AllowExternalDrop property of
  /// CoreWebView2Controller and return E_FAIL to callers to indicate this
  /// operation is not allowed if AllowExternalDrop property is set to false.
  ///
  /// The hosting application must register as an IDropTarget and implement
  /// and forward DragOver calls to this function.
  ///
  /// In addition, the hosting application needs to create an IDropTargetHelper
  /// and call the corresponding \[IDropTargetHelper::DragOver\]\[WindowsWin32ApiShobjidlCoreNfShobjidlCoreIdroptargethelperDragover\] function on that
  /// object before forwarding the call to WebView.
  ///
  /// point parameter must be modified to include the WebView's offset and be in
  /// the WebView's client coordinates (Similar to how SendMouseInput works).
  ///
  /// \[WindowsWin32ApiOleidlNfOleidlIdroptargetDragover\]: /windows/win32/api/oleidl/nf-oleidl-idroptarget-dragover "IDropTarget::DragOver (oleidl.h) - Win32 apps | Microsoft Docs"
  ///
  /// \[WindowsWin32ApiShobjidlCoreNfShobjidlCoreIdroptargethelperDragover\]: /windows/win32/api/shobjidl_core/nf-shobjidl_core-idroptargethelper-dragover "IDropTargetHelper::DragOver (shobjidl_core.h) - Win32 apps | Microsoft Docs"
  ///
  /// \snippet DropTarget.cpp DragOver
  HRESULT DragOver(
      [in] DWORD keyState,
      [in] POINT point,
      [out, retval] DWORD* effect);

  /// This function corresponds to \[IDropTarget::Drop\]\[WindowsWin32ApiOleidlNfOleidlIdroptargetDrop\].
  ///
  /// This function has a dependency on AllowExternalDrop property of
  /// CoreWebView2Controller and return E_FAIL to callers to indicate this
  /// operation is not allowed if AllowExternalDrop property is set to false.
  ///
  /// The hosting application must register as an IDropTarget and implement
  /// and forward Drop calls to this function.
  ///
  /// In addition, the hosting application needs to create an IDropTargetHelper
  /// and call the corresponding \[IDropTargetHelper::Drop\]\[WindowsWin32ApiShobjidlCoreNfShobjidlCoreIdroptargethelperDrop\] function on that
  /// object before forwarding the call to WebView.
  ///
  /// point parameter must be modified to include the WebView's offset and be in
  /// the WebView's client coordinates (Similar to how SendMouseInput works).
  ///
  /// \[WindowsWin32ApiOleidlNfOleidlIdroptargetDrop\]: /windows/win32/api/oleidl/nf-oleidl-idroptarget-drop "IDropTarget::Drop (oleidl.h) - Win32 apps | Microsoft Docs"
  ///
  /// \[WindowsWin32ApiShobjidlCoreNfShobjidlCoreIdroptargethelperDrop\]: /windows/win32/api/shobjidl_core/nf-shobjidl_core-idroptargethelper-drop "IDropTargetHelper::Drop (shobjidl_core.h) - Win32 apps | Microsoft Docs"
  ///
  /// \snippet DropTarget.cpp Drop
  HRESULT Drop(
      [in] IDataObject* dataObject,
      [in] DWORD keyState,
      [in] POINT point,
      [out, retval] DWORD* effect);
}

/// This interface is a handler for when the `Favicon` is changed.
/// The sender is the ICoreWebView2 object the top-level document of 
/// which has changed favicon and the eventArgs is nullptr. Use the 
/// FaviconUri property and GetFavicon method to obtain the favicon 
/// data. The second argument is always null.
/// For more information see `add_FaviconChanged`.
[uuid(2913DA94-833D-4DE0-8DCA-900FC524A1A4), object, pointer_default(unique)]
interface ICoreWebView2ExperimentalFaviconChangedEventHandler : IUnknown {
  /// Called to notify the favicon changed. The event args are always null.
  HRESULT Invoke(
      [in] ICoreWebView2* sender,
      [in] IUnknown* args);
}

/// This interface is a handler for the completion of the population of
/// `imageStream`.
/// `errorCode` returns S_OK if the API succeeded.
/// The image is returned in the `faviconStream` object. If there is no image
/// then no data would be copied into the imageStream.
/// For more details, see the `GetFavicon` API.
[uuid(A2508329-7DA8-49D7-8C05-FA125E4AEE8D), object, pointer_default(unique)]
interface ICoreWebView2ExperimentalGetFaviconCompletedHandler : IUnknown {
  /// Called to notify the favicon has been retrieved.
  HRESULT Invoke(
      [in] HRESULT errorCode,
      [in] IStream* faviconStream);
}

/// This interface is an extension of ICoreWebView2Experimental12 that support Favicons.
[uuid(2B1AAA06-CE28-4565-AE06-26404C2E8D10), object, pointer_default(unique)]
interface ICoreWebView2Experimental12 : IUnknown {
  /// Add an event handler for the `FaviconChanged` event.
  /// The `FaviconChanged` event is raised when the 
  /// [favicon](https://developer.mozilla.org/en-US/docs/Glossary/Favicon)
  /// had a different URL then the previous URL.
  /// The FaviconChanged event will be raised for first navigating to a new 
  /// document, whether or not a document declares a Favicon in HTML if the
  /// favicon is different from the previous fav icon. The event will 
  /// be raised again if a favicon is declared in its HTML or has script 
  /// to set its favicon. The favicon information can then be retrieved with 
  /// `GetFavicon` and `FaviconUri`.
  HRESULT add_FaviconChanged(
      [in] ICoreWebView2ExperimentalFaviconChangedEventHandler* eventHandler,
      [out] EventRegistrationToken* token);

  /// Remove the event handler for `FaviconChanged` event.
  HRESULT remove_FaviconChanged(
      [in] EventRegistrationToken token);

  /// Get the current Uri of the favicon as a string.
  /// If the value is null, then the return value is `E_POINTER`, otherwise it is `S_OK`.
  /// If a page has no favicon then the value is an empty string.
  ///
  /// The caller must free the returned string with `CoTaskMemFree`.  See
  /// [API Conventions](/microsoft-edge/webview2/concepts/win32-api-conventions#strings).
  [propget] HRESULT FaviconUri([out, retval] LPWSTR* value);

  /// Async function for getting the actual image data of the favicon.
  /// The image is copied to the `imageStream` object in `ICoreWebView2GetFaviconCompletedHandler`.
  /// If there is no image then no data would be copied into the imageStream.
  /// The `format` is the file format to return the image stream.
  /// `completedHandler` is executed at the end of the operation.
  HRESULT GetFavicon(
        [in] COREWEBVIEW2_FAVICON_IMAGE_FORMAT format,
        [in] ICoreWebView2ExperimentalGetFaviconCompletedHandler* completedHandler);
}

}
